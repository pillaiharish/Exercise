A)first make a repo in github manually
B)configure the device using ssh. go to settings in github and paste the rsa(or any encryption file contents) to ssh and gpg keys, add to ssh keys.


if no clone command used then initialize the folder on local for git.
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your_email@example.com"

$ git init 

$ ssh-keygen -t rsa -b 4096 -C "harishpillai1994@gmail.com"

$ ssh -T git@github.com

after the above command you would get a file on your local folder, with the paraphrase used earlier just open with notepad, copy the entire content to mentioned in step(B)

C) create a repo in github or 
D) create repo in local then commit to github

for step(C)
1)create github repo manually in github/your_profilename 
2)clone the repo on local
$ git clone https://github.com/pillaiharish/Exercise

3)then create files required, then 'add' to local repo of git, 'commit' them locally then use 'git push'. For 'push' you need origin reference to the remote(server) location of the master
$  git remote add origin https://github.com/pillaiharish/

$  git add datacamp/
$  git commit
$  git push -u origin master
-----------------------------------
###############deletion######################
Since git is a distributed VCS, your local repository contains all of the information. No downloading is necessary; you just need to extract the content you want from the repo at your fingertips.

If you haven't committed the deletion, just check out the files from your current commit:

$ git checkout HEAD <path>

If you have committed the deletion, you need to check out the files from a commit that has them. Presumably it would be the previous commit:

$ git checkout HEAD^ <path>

but if it's n commits ago, use HEAD~n, or simply fire up gitk, find the SHA1 of the appropriate commit, and paste it in.

other git commands
$ git pull
$ git log
$ git status
$ eval $(ssh-agent -s)
$ ssh-add -l
$ git remote -v
$ git checkout git_win/git_initial 
-----------------------------
########## LF to CRLF file ending.
In Unix systems the end of a line is represented with a line feed (LF). In windows a line is represented with a carriage return (CR) and a line feed (LF) thus (CRLF). when you get code from git that was uploaded from a unix system they will only have an LF.

Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem. You can turn on this functionality with the core.autocrlf setting. If you’re on a Windows machine, set it to true – this converts LF endings into CRLF when you check out code
$ git config --global core.autocrlf true

If you’re on a Linux or Mac system that uses LF line endings, then you don’t want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it. You can tell Git to convert CRLF to LF on commit but not the other way around by setting core.autocrlf to input:
$ git config --global core.autocrlf input

If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false:
$ git config --global core.autocrlf false
